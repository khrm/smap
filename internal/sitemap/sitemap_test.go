package sitemap

import (
	"reflect"
	"testing"
)

// TestNew test the constructor of SiteMap
// Not really needed, it got generated by gotest command for file
func TestNew(t *testing.T) {
	tests := []struct {
		name string
		want *SiteMap
	}{
		{
			"TestNew 1",
			&SiteMap{
				URLs:        make(map[string]struct{}),
				Connections: make(map[string]map[string]struct{}),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := New(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("New() = %v, want %v", got, tt.want)
			}
		})
	}
}

// TestSiteMap_AddURL test function AddURL
func TestSiteMap_AddURL(t *testing.T) {
	type fields struct {
		URLs        map[string]struct{}
		Connections map[string]map[string]struct{}
	}
	type args struct {
		url string
	}
	nURL := "NewURL"
	eURL := "ExistingURL"
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
		{
			name: "TestSiteMap_AddURL - 1 pos",
			fields: fields{
				URLs: make(map[string]struct{}),
				Connections: make(
					map[string]map[string]struct{}),
			},
			args: args{nURL},
			want: true,
		},
		{
			name: "TestSiteMap_AddURL - 2 neg",
			fields: fields{
				URLs: map[string]struct{}{eURL: {}},
				Connections: make(
					map[string]map[string]struct{}),
			},
			args: args{eURL},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := &SiteMap{
				URLs:        tt.fields.URLs,
				Connections: tt.fields.Connections,
			}
			if got := s.AddURL(tt.args.url); got != tt.want {
				t.Errorf("SiteMap.AddURL() = %v, want %v", got, tt.want)
			}
		})
	}
}

// TestSiteMap_AddConnection test AddConnection to SiteMap
func TestSiteMap_AddConnection(t *testing.T) {
	type fields struct {
		URLs        map[string]struct{}
		Connections map[string]map[string]struct{}
	}
	type args struct {
		u string
		v string
	}

	a := "URL a"
	b := "URL b"
	fieldsWithNoConnection := fields{
		URLs: map[string]struct{}{a: {},
			b: {}},
		Connections: make(
			map[string]map[string]struct{}),
	}

	tests := []struct {
		name   string
		fields fields
		args   args
		want   *SiteMap
	}{
		{
			name:   "TestSiteMap_AddConnection - 1 pos",
			fields: fieldsWithNoConnection,
			args: args{
				u: a,
				v: b,
			},
			want: &SiteMap{
				URLs: map[string]struct{}{a: {}, b: {}},
				Connections: map[string]map[string]struct{}{
					a: {b: struct{}{}},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := &SiteMap{
				URLs:        tt.fields.URLs,
				Connections: tt.fields.Connections,
			}
			s.AddConnection(tt.args.u, tt.args.v)

			if !reflect.DeepEqual(tt.want, s) {
				t.Errorf("\nNew() = %v, \n want  = %v", s, tt.want)
			}
		})
	}
}

func TestSiteMap_ToXMLSTDSiteMap(t *testing.T) {
	type fields struct {
		URLs        map[string]struct{}
		Connections map[string]map[string]struct{}
	}

	f := fields{
		URLs: map[string]struct{}{"https://exA": {}},
		Connections: make(
			map[string]map[string]struct{}),
	}

	want := `<urlset xmlns="https://www.sitemaps.org/schemas/sitemap/0.9">` +
		`<url><loc>https://exA</loc></url></urlset>`
	tests := []struct {
		name    string
		fields  fields
		want    []byte
		wantErr bool
	}{
		{
			name:    "TestSiteMap_ToXMLSTDSiteMap",
			fields:  f,
			want:    []byte(want),
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := &SiteMap{
				URLs:        tt.fields.URLs,
				Connections: tt.fields.Connections,
			}
			got, err := s.ToXMLSTDSiteMap()
			if (err != nil) != tt.wantErr {
				t.Errorf("SiteMap.ToXMLSTDSiteMap() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("SiteMap.ToXMLSTDSiteMap() = %v, want %v", string(got), string(tt.want))
			}
		})
	}
}
